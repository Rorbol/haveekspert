---

Metadata:

  Authors:
    Description: Joachim Rorbol (jr@efio.dk)

  AWS::CloudFormation::Interface:

    ParameterGroups:
    - Label:
        default: GitHub settings
      Parameters:
      - GitHubOwner
      - RepositoryName
      - BranchName
      - GitHubToken
      - GitHubTokenType 
   
    ParameterLabels:
      GitHubOwner:
        default: GitHub owner account
      RepositoryName:
        default: GitHub repository name

Parameters:
  RepositoryName:
    Description: GitHub repository name
    Type: String
    Default: skysovs
  GitHubOwner:
    Type: String
    Default: efio-dk
  GitHubToken:
    Type: String
    NoEcho: true
  GitHubTokenType:
    Type: String
    AllowedValues: [ "Secrets manager ARN", "Clear text" ]
    Default: Clear text
  BranchName:
    Type: String

Conditions:
  SetGitHubToken: !Equals [ "Clear text", !Ref GitHubTokenType ]

Resources:

  GithubTokenSecret:
    Condition: SetGitHubToken
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: GitHub token for webhook
      SecretString: !Sub '{"token": "${GitHubToken}"}'

  CicdRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service:
                - cloudformation.amazonaws.com
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
            Action: "sts:AssumeRole"
      Description: PoC - NodeJS Lambda deployment pipeline Role
      RoleName: !Sub '${AWS::StackName}-role'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/PowerUserAccess
      Policies:
        - PolicyName: "IAMRolePolicyPermission"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - iam:Get*
                  - iam:List*
                  - iam:Simulate*
                  - iam:Create*
                  - iam:Update*
                  - iam:Delete*
                  - iam:Put*
                  - iam:Add*
                  - iam:Remove*
                  - iam:Attach*
                  - iam:Detach*
                  - iam:Tag*
                  - iam:Untag*
                  - iam:Pass*
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/*
                  - !Sub arn:aws:iam::${AWS::AccountId}:policy/*
                  - !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/*

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  SnsTopic:
    Type: AWS::SNS::Topic
    Properties: 
      # DisplayName: String
      # Subscription: 
      #   - Subscription
      # Tags: 
      #   - Tag
      TopicName: !Sub ${AWS::StackName}-topic

  NotificationRule:
    DependsOn: Pipeline
    Type: AWS::CodeStarNotifications::NotificationRule
    Properties: 
      DetailType: BASIC
      EventTypeIds: 
        - codepipeline-pipeline-manual-approval-succeeded
        - codepipeline-pipeline-pipeline-execution-canceled
        - codepipeline-pipeline-pipeline-execution-failed
        - codepipeline-pipeline-manual-approval-needed
        - codepipeline-pipeline-manual-approval-failed
      Name: !Sub ${AWS::StackName}-FeatureNotification
      Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
      Status: ENABLED
      Targets: 
        - TargetType: SNS 
          TargetAddress: !Ref SnsTopic

  Webhook: 
    Type: AWS::CodePipeline::Webhook
    Properties:
      AuthenticationConfiguration: 
        SecretToken: !Sub
          - '{{resolve:secretsmanager:${Token}:SecretString:token}}'
          - Token: !If [ SetGitHubToken, !Ref GithubTokenSecret, !Ref GitHubToken ]
      Filters: 
      - JsonPath: "$.ref" 
        MatchEquals: refs/heads/{Branch} 
      Authentication: GITHUB_HMAC 
      TargetPipeline: !Ref Pipeline
      TargetAction: Source 
      Name: !Sub ${AWS::StackName}-Webhook 
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true

  Pipeline: 
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      Name: !Sub ${AWS::StackName}
      RoleArn: !GetAtt [ CicdRole, Arn ]
      RestartExecutionOnUpdate: true
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        # Source stage
        - Name: Source
          Actions:
          - Name: Source
            Namespace: SourceVariables
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Version: '1'
              Provider: GitHub
            Configuration:
              Owner: !Ref GitHubOwner
              Repo: !Ref RepositoryName
              PollForSourceChanges: 'false'
              Branch: master
              OAuthToken: !Sub
                - '{{resolve:secretsmanager:${Token}:SecretString:token}}'
                - Token: !If [ SetGitHubToken, !Ref GithubTokenSecret, !Ref GitHubToken ]
            OutputArtifacts:
            - Name: source
            RunOrder: 1

        # Static code analysis stage
        - Name: StaticCodeAnalysis
          Actions:
          - Name: cfn-lint
            InputArtifacts:
            - Name: source
            ActionTypeId:
              Category: Test
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            Configuration:
              ProjectName: !Sub ${AWS::StackName}-cfn-lint
            RunOrder: 1

          - Name: cfn-nag
            InputArtifacts:
            - Name: source
            ActionTypeId:
              Category: Test
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            Configuration:
              ProjectName: !Sub ${AWS::StackName}-cfn-nag
            RunOrder: 1

        # Release infrastructure
        - Name: DeployInfrastructure
          Actions:
          - Name: updatePipeline
            InputArtifacts:
            - Name: source
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: '1'
              Provider: CloudFormation
            Configuration:
              ActionMode: CREATE_UPDATE
              RoleArn:  !GetAtt [ CicdRole, Arn ] 
              Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
              StackName: !Ref AWS::StackName
              OutputFileName: pipeline
              TemplatePath: source::cfn/cicd.yaml
              ParameterOverrides: !Sub
                - |
                  {
                    "RepositoryName": "${RepositoryName}",
                    "GitHubOwner": "${GitHubOwner}",
                    "GitHubToken": "${Token}",
                    "GitHubTokenType": "Secrets manager ARN" ,
                    "BranchName": "${BranchName}"
                  }
                - Token: !If [ SetGitHubToken, !Ref GithubTokenSecret, !Ref GitHubToken ]
            OutputArtifacts: []
            RunOrder: 1

          - Name: deployWebsite
            Namespace: website
            InputArtifacts:
            - Name: source
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: '1'
              Provider: CloudFormation
            Configuration:
              ActionMode: CREATE_UPDATE
              RoleArn:  !GetAtt [ CicdRole, Arn ] 
              Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
              StackName: !Sub ${RepositoryName}-website
              TemplatePath: source::cfn/website.yaml
              TemplateConfiguration: source::cfn/cfg/cdn.yaml
            OutputArtifacts: []
            RunOrder: 2

          # - Name: deployCdn
          #   Region: us-east-1
          #   InputArtifacts:
          #   - Name: source
          #   ActionTypeId:
          #     Category: Deploy
          #     Owner: AWS
          #     Version: '1'
          #     Provider: CloudFormation
          #   Configuration:
          #     ActionMode: CREATE_UPDATE
          #     RoleArn:  !GetAtt [ CicdRole, Arn ] 
          #     Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
          #     StackName: !Sub ${RepositoryName}-cdn
          #     TemplatePath: source::cfn/cdn.yaml
          #     ParameterOverrides: !Sub
          #       - |
          #         {
          #           "RepositoryName": "${RepositoryName}",
          #           "GitHubOwner": "${GitHubOwner}",
          #           "GitHubToken": "${Token}",
          #           "GitHubTokenType": "Secrets manager ARN" ,
          #           "BranchName": "${BranchName}"
          #         }
          #       - Token: !If [ SetGitHubToken, !Ref GithubTokenSecret, !Ref GitHubToken ]
          #   OutputArtifacts: []
          #   RunOrder: 3

        # Static code analysis stage
        - Name: BuildHugoWebsite
          Actions:
          - Name: hugo-build
            InputArtifacts:
            - Name: source
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            Configuration:
              ProjectName: !Sub ${AWS::StackName}-hugo-build
              EnvironmentVariables: |
                [{
                  "name":   "bucket",
                  "value":  "#{website.WebsiteBucket}",
                  "type":   "PLAINTEXT"
                }]
            OutputArtifacts:
            - Name: hugo
            RunOrder: 1

        # Publish website
        - Name: PublishStaticWebsite
          Actions:
          - Name: hugo-static-publish
            InputArtifacts:
            - Name: hugo
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: '1'
              Provider: S3
            Configuration:
              # ObjectKey: "cfn/#{SourceVariables.BranchName}/#{SourceVariables.CommitterDate}"
              Extract: "true"
              BucketName: "#{website.WebsiteBucket}"
            OutputArtifacts: []
            RunOrder: 1

  CfnLintLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/codebuild/${AWS::StackName}-cfn-lint
      RetentionInDays: 7

  CfnLintProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Sub ${AWS::StackName}-cfn-lint
      Description: Cloudformation linter
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /aws/codebuild/${AWS::StackName}-cfn-lint
          Status: ENABLED
      TimeoutInMinutes: 5
      QueuedTimeoutInMinutes: 5
      ServiceRole: !Ref CicdRole
      Source: 
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: latest
              commands:
                - pip install cfn-lint
            build:
              commands:
                - cfn-lint --version
                - cfn-lint cfn/*.yaml
        Type: CODEPIPELINE

  CfnNagLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/codebuild/${AWS::StackName}-cfn-nag
      RetentionInDays: 7

  CfnNagProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Sub ${AWS::StackName}-cfn-nag
      Description: Cloudformation compliance-as-code
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /aws/codebuild/${AWS::StackName}-cfn-nag
          Status: ENABLED
      TimeoutInMinutes: 5
      QueuedTimeoutInMinutes: 5
      ServiceRole: !Ref CicdRole
      Source: 
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                ruby: latest
              commands:
                - gem install cfn-nag
            build:
              commands:
                - cfn_nag_scan --version
                - cfn_nag_scan --input-path cfn/
        Type: CODEPIPELINE

  HugoBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/codebuild/${AWS::StackName}-hugo-build
      RetentionInDays: 7

  HugoBuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Sub ${AWS::StackName}-hugo-build
      Description: Hugo website 
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub /aws/codebuild/${AWS::StackName}-hugo-build
          Status: ENABLED
      TimeoutInMinutes: 5
      QueuedTimeoutInMinutes: 5
      ServiceRole: !Ref CicdRole
      Source: 
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                golang: latest
              commands:
                # - git clone https://github.com/gohugoio/hugo.git && cd hugo && go install --tags extended
                - wget https://copr.fedorainfracloud.org/coprs/daftaupe/hugo/repo/epel-7/daftaupe-hugo-epel-7.repo -O /etc/yum.repos.d/hugo.repo
                - yum update -y && yum install hugo -y
            build:
              commands:
                - cd haveekspert
                - hugo -D --destination ../static
            post_build:
              commands:
                - echo ${bucket}
                - aws s3 sync ../static s3://${bucket}/ --delete
          artifacts:
            discard-paths: yes
            files:
              # ${artifactPath}**/*
              static/**/*
        Type: CODEPIPELINE
